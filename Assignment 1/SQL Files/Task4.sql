use techshop;

-- Write an SQL query to find out which customers have not placed any orders.
 select c.*
 from customers c
 left join orders o on c.customerID = o.customerID
 where o.customerID is null;

-- Write an SQL query to find the total number of products available for sale.
 select p.*
 from products p 
 join inventory i on p.productID = i.productID
 where i.QuantityInStock > 0;

-- Write an SQL query to calculate the total revenue generated by TechShop.
select sum(TotalAmount) as `Total Revenue`
from orders;

-- Write an SQL query to calculate the average quantity ordered for products in a specific category. 
-- Allow users to input the category name as a parameter. 
Delimiter $$
Create procedure AverageOrderQuantity(IN p_category_name varchar(255))
	Begin
		select proDesc as Category, avg(od.quantity) as `Average Orders`
		from products p
		join orderdetails od on p.productId = od.productID
		group by proDesc
        having proDesc = p_category_name;
	End $$
Delimiter ; 

-- Write an SQL query to calculate the total revenue generated by a specific customer. 
-- Allow users to input the customer ID as a parameter. 
delimiter $$
create procedure RevenueByCustomer(IN p_customer_id int)
begin
	select p_customer_id, sum(TotalAmount) as `Total Revenue`
	from orders
    where customerID = p_customer_id
	group by customerID;
end $$
delimiter ;

-- Write an SQL query to find the customers who have placed the most orders. 
-- List their names and the number of orders they've placed.
select concat(firstName, ' ', lastname) as `Full Name`, total_orders
from customers
where total_orders = (select count(o.customerID) as total_orders
			from orders o
			group by o.customerID
			order by total_orders desc
            limit 1
);

-- Write an SQL query to find the most popular product category, 
-- which is the one with the highest total quantity ordered across all orders.
With cte as (
	select p.proDesc, sum(od.quantity) as ordered_quantity
	from orderdetails od
	join products p on od.productID = p.productID
	group by p.proDesc
)
select proDesc, ordered_quantity
from cte
where ordered_quantity =
			(select max(ordered_quantity)
            from cte);

-- Write an SQL query to find the customer who has spent the most money (highest total revenue) on electronic gadgets. 
-- List their name and total spending. 
With cte as (select o.customerID, p.proDesc, sum(od.quantity*p.price) as Total_Price
			from orders o
			join orderdetails od on o.orderID = od.orderID
			join products p on od.productID = p.productID
			group by p.proDesc, o.customerID
			having proDesc = 'Entertainment')
select concat(c.firstname, ' ', c.lastname) as `Full Name`, cte.Total_Price
from customers c
join cte on c.customerID = cte.customerID
having cte.Total_Price = (select max(Total_Price)
							from cte);


-- Write an SQL query to calculate the average order value 
-- (total revenue divided by the number of orders) for all customers. 
select CustomerID, round(avg(totalamount), 2) as `Average value`
from orders
group by customerID;

-- Write an SQL query to find the total number of orders placed by each customer
--  and list their names along with the order count. 
select o.customerID, concat(c.firstname, ' ', c.lastname) as `Full Name`, count(o.customerID) as `Total Orders`
from orders o
join customers c on o.customerID = c.customerID
group by o.customerID;







set sql_safe_updates = 1;

select * from customers;
select * from inventory;
select * from orders;
select * from orderdetails;
select * from products;

-- insert into inventory(productID, QuantityInStock, LastStockUpdate)
-- values (11, 0, now());

-- update orders
-- set orderDate = '2024-01-12 10:00:00'
-- where orderID = 7;

-- UPDATE Orders o
-- SET TotalAmount = (
--     SELECT SUM(p.Price * od.Quantity)
--     FROM OrderDetails od
--     JOIN Products p ON od.ProductID = p.ProductID
--     WHERE od.OrderID = o.OrderID
-- );


-- select *, (od.quantity*p.price) as Total_Price
-- 			from orders o
-- 			join orderdetails od on o.orderID = od.orderID
-- 			join products p on od.productID = p.productID
--             ;

