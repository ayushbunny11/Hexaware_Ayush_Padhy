use techshop;

-- UPDATE Orders o
-- SET TotalAmount = (
--     SELECT SUM(p.Price * od.Quantity)
--     FROM OrderDetails od
--     JOIN Products p ON od.ProductID = p.ProductID
--     WHERE od.OrderID = o.OrderID
-- );


-- Write an SQL query to retrieve a list of all orders along with 
-- customer information (e.g., customer name) for each order. 

select o.*, concat(c.firstName,' ', c.lastName) as `Customer Name`
from orders o
join customers c on c.customerID = o.customerID;


-- Write an SQL query to find the total revenue generated by each electronic gadget product. 
-- Include the product name and the total revenue. 

select p.productName, sum(p.price*od.quantity) as `Total Revenue`
from products p 
join orderdetails od on p.productID = od.productID
group by p.productName
order by `Total Revenue` desc;

-- Write an SQL query to list all customers who have made at least one purchase. 
-- Include their names and contact information.
select concat(firstName,' ', lastName) as `Customer Name`, email, phone
from customers
where total_orders >= 1;
-- OR --
select concat(firstName,' ', lastName) as `Customer Name`, c.Email, c.Phone
from customers c 
join orders o on o.customerID = c.customerID
group by o.customerID
having count(o.customerID)>=1;

-- Write an SQL query to find the most popular electronic gadget, 
-- which is the one with the highest total quantity ordered. Include the product name and the total quantity ordered. 
select od.productID, p.productName, sum(od.quantity) as total_orders
from orderdetails od
join products p on od.productID = p.productID
group by od.productID
order by total_orders desc
limit 1;

-- Write an SQL query to retrieve a list of electronic gadgets along with their corresponding categories.
select productName, proDesc as Category
from products
order by proDesc; 

-- Write an SQL query to calculate the average order value for each customer. 
-- Include the customer's name and their average order value. 
select c.customerID, concat(firstName,' ', lastName) as `Customer Name`, round(avg(o.totalAmount),2) as Average_Spend
from customers c
join orders o on c.customerID = o.customerID
group by o.customerID;

-- Write an SQL query to find the order with the highest total revenue. 
-- Include the order ID, customer information, and the total revenue. 
select c.*, totalAmount
from orders o
join customers c on o.customerID = c.customerID
order by totalAmount desc
limit 1;

-- Write an SQL query to list electronic gadgets and the number of times each product has been ordered. 
select p.productname, count(od.productID) as `Count of Orders`
from orderdetails od
join products p on od.productId = p.productID
group by od.productID
order by count(od.productID) desc;


-- Write an SQL query to find customers who have purchased a specific electronic gadget product. 
-- Allow users to input the product name as a parameter. 
delimiter $$
create procedure FindCustomer(IN p_product_name varchar(255))
begin
	select c.*
    from customers c
    join orders o on c.customerID = o.customerID
    join orderdetails od on o.orderID = od.orderID
    join products p on od.productID = p.productID
    where p.ProductName = p_product_name;
end $$
delimiter ;


-- Write an SQL query to calculate the total revenue generated by all orders placed within a specific time period. 
-- Allow users to input the start and end dates as parameters. 
delimiter $$
create procedure RevenueInBetween(IN p_start_date datetime, IN p_end_date datetime)
begin
	SET @resultColumnName = CONCAT('Total Revenue (', p_start_date, ' to ', p_end_date, ')');
	select sum(totalAmount) as `Total Revenue Generated`
    from orders
    where orderDate between p_start_date and p_end_date;
end $$
delimiter ;








set sql_safe_updates = 1;

select * from customers;
select * from inventory;
select * from orders;
select * from orderdetails;
select * from products;

insert into orderdetails(orderID, productID, Quantity)
values (11, 8, 1), (12, 2, 1);

update orders
set orderDate = '2024-01-12 10:00:00'
where orderID = 7;