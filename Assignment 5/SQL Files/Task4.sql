use ticektbookingsystem;

-- Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.
select venueID, avg(ticketPrice)
from (select venueId, ticketPrice from t_event) a
group by venueID;

-- Find Events with More Than 50% of Tickets Sold using subquery.
select eventID
from t_event
where eventID in (
				select eventID
                from t_event
                where availableSeats = 0 OR (totalSeats-availableSeats)>availableSeats
				);

-- Calculate the Total Number of Tickets Sold for Each Event.
select eventID, totalSeats-availableSeats as `Tickets Sold`
from t_event
order by `Tickets Sold`;

-- Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.
 select *
 from customer c
 where NOT EXISTS(Select distinct customerID -- distinct customerID is a placeholder
				from booking b 
                where b.customerID = c.customerID);

-- List Events with No Ticket Sales Using a NOT IN Subquery
select *
from t_event
where eventID NOT IN (select eventID from t_event where totalSeats!=availableSeats);

-- Calculate the Total Number of Tickets Sold for Each Event Type 
-- Using a Subquery in the FROM Clause. 
select ev.eventType, sum(ev.totalSeats-ev.availableSeats) as `Ticket Sold`
from (
	select eventType, totalSeats, availableSeats
	from t_event) ev
group by ev.eventType;

-- Find Events with Ticket Prices Higher Than the 
-- Average Ticket Price Using a Subquery in the WHERE Clause.
select eventID, eventName, ticketPrice
from t_event
where ticketPrice > (select avg(ticketPrice)
					from t_event);

-- Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.
select c.customerID,
	   c.customerName,
       coalesce((
			select SUM(totalCost)
			from booking b
			where b.customerID = c.customerID
		), 0) as `Total Revenue`
from customer c;

-- List Users Who Have Booked Tickets for Events in a 
-- Given Venue Using a Subquery in the WHERE Clause.
select b.customerID, c.customerName
from booking b
join customer c on b.customerID = c.customerID
where eventID in (
				select eventID 
				from t_event e 
                where e.eventID = b.eventID and e.venueID = 'V010');
                
-- Calculate the Total Number of Tickets Sold for 
-- Each Event Category Using a Subquery with GROUP BY. 
select ev.eventType, `Ticket Sold`
from (
	select eventType, sum(totalSeats-availableSeats) as `Ticket Sold`
	from t_event
    group by eventType) ev;

-- Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT.


-- Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
select v.venueID, venueName, coalesce(ven.avg_price, 0) as `Average Price`
from venue v
left join (select venueID, avg(TicketPrice) as avg_price
		from t_event
		group by venueID) ven on v.venueID = ven.venueID;



set sql_safe_updates = 1;

select * from booking;
select * from customer;
select * from t_event;
select * from venue;


insert into customer
values('C016', 'Danny White', 'White@holdingbusiness.com', '8374839215');