use ticketbookingsystem;

-- Write a SQL query to List Events and Their Average Ticket Prices.
select eventID, eventName, round(avg(ticketPrice), 2) as `Average Ticket Price`
from t_event
group by eventID, eventname;
 
-- Write a SQL query to Calculate the Total Revenue Generated by Events.
select eventName, SUM(((totalSeats-availableSeats)*ticketPrice)) as `Total Revenue`
from t_event
group by eventName
order by `Total Revenue` desc;

-- Write a SQL query to find the event with the highest ticket sales.
select b.eventID, e.eventName, sum(numTickets) as total_tickets
from booking b
join t_event e on b.eventID = e.eventID
group by b.eventID
having total_tickets = (
						select max(total_tickets)
						from (select eventID, sum(numTickets) as total_tickets
								from booking
								group by eventID) x);

-- Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event.
select eventID, sum(numTickets) as total_tickets
from booking
group by eventID;

-- Write a SQL query to Find Events with No Ticket Sales.
select e.*
from t_event e
left join booking b on e.eventID = b.eventID
where b.eventID is null; 

-- Write a SQL query to Find the User Who Has Booked the Most Tickets.
select c.*, sum(numTickets) as total_tickets
from customer c
join booking b on c.customerID = b.customerID
group by b.customerID
having sum(numTickets) = (
		select max(total_tickets)
		from(
			select customerID, sum(numTickets) as total_tickets
			from booking
			group by customerID) a);

-- Write a SQL query to List Events and the total number of tickets sold for each month.
select b.eventID, 
	   e.eventName, 
	   e.eventDate, 
       monthname (bookingDate) as `Booking Month`, 
       sum(numTickets) as `Total Tickets`
from booking b
join t_event e on b.eventId = e.eventId
group by eventID, `Booking Month`;

-- Write a SQL query to calculate the average Ticket Price for Events in Each Venue.
select venueID, round(avg(ticketPrice), 2) as `Average Ticket Price`
from t_event
group by venueID;

-- Write a SQL query to calculate the total Number of Tickets Sold for Each Event Type. 
select eventType, sum(totalSeats-availableSeats) as `Tickets Sold`
from t_event
group by eventType;

-- Write a SQL query to calculate the total Revenue Generated by Events in Each Year.
select eventName, Year(eventDate), SUM((((totalSeats + availableSeats)-availableSeats)*ticketPrice)) as `Total Revenue`
from t_event
group by eventName, Year(eventDate)
order by `Total Revenue` desc;

-- Write a SQL query to list users who have booked tickets for multiple events.
select b.customerID, c.customerName, count(distinct b.eventID) as Events_Booked
from booking b
join customer c on b.customerID = c.customerID
group by b.customerID
having count(distinct b.eventID)>1;

-- Write a SQL query to calculate the Total Revenue Generated by Events for Each User.
select customerID, eventID, sum(totalCost) as `Total Revenue`
from booking
group by customerID, eventID
order by `Total Revenue` desc;

-- Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue.
select eventType, venueID, round(avg(TicketPrice), 2) as `Average Ticket Price`
from t_event
group by eventType, venueID
order by eventType;

-- Write a SQL query to list Users and the Total Number of Tickets They've Purchased in the Last 30 Days. 
select customerID, sum(numTickets) as `Total Tickets`
from booking
where bookingDate between ('2024-03-31' - interval 30 day) and '2024-03-31'
group by customerID;




set sql_safe_updates = 1;

select * from booking;
select * from customer;
select * from t_event;
select * from venue;

-- update customer
-- set phoneNumber = '7583128000'
-- where customerID in ('C010')